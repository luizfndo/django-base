"""This module contains functions and classes to generate validation token.

The validation token is sent to the user by email to allow the user confirm
your account as soon as the user signing up on the website. The token is
compose for the user ID (primary key) and a timestamp that will be used in
the future to calculate the validity of the token.
"""
from datetime import date

from django.conf import settings
from django.utils.http import base36_to_int, int_to_base36
from django.utils.crypto import constant_time_compare, salted_hmac


def make_hash_value(user, timestamp):
    """Make the value of the hash.

    The hash value is composed by the concatenation of the user id and
    timestamp parameter. The timestamp is the number of days elapsed since
    2001-01-01 until today. The return should be an string with the value.
    """
    if not (user and timestamp):
        param = 'user' if not user else 'timestamp'
        raise ValueError(f'Invalid value for the {param} parameter.')

    # This validation is important for the case where the user object has not
    # been saved in the database yet. And as a result, the user id has not been
    # bound to it yet.
    if user and not user.pk:
        raise ValueError('The user id cannot be None.')

    return f'{user.pk}{timestamp}'


def num_elapsed_days(today):
    """Return the number of days elapsed between 2001-01-01 until today."""
    if not isinstance(today, date):
        msg = 'Invalid type [{}] to today parameter.'.format(type(today))
        raise TypeError(msg)
    return (today - date(2001, 1, 1)).days


def _today():
    """Return today's date."""
    return date.today()


class ValidationTokenGenerator:
    """Validation token generator and checker."""
    key_salt = 'django_base.apps.account.tokens.ValidationTokenGenerator'
    secret = settings.SECRET_KEY

    def make_token(self, user):
        """Make the token used to validate the user account.

        The token is composed by the user id and the number of days elapsed
        since 2001-01-01 until today.
        """
        return self._make_token_with_timestamp(user, num_elapsed_days(_today()))

    def check_token(self, user, token):
        """Check token generated to validate the user account."""
        if not (user and token):
            return False
        try:
            ts_b36, _ = token.split('-')
        except ValueError:
            return False
        try:
            timestamp = base36_to_int(ts_b36)
        except ValueError:
            return False
        if not constant_time_compare(
                self._make_token_with_timestamp(user, timestamp), token):
            return False
        if (num_elapsed_days(_today()) - timestamp) >=\
                settings.VALIDATION_TIMEOUT_DAYS:
            return False
        return True

    def _make_token_with_timestamp(self, user, timestamp):
        """Make the token using the user id and the timestamp parameter.

        The return is a string composed for the timestamp in the base 36 and
        the hash generated by the salted_hmac function.
        """
        ts_b36 = int_to_base36(timestamp)
        hash_str = salted_hmac(
            self.key_salt,
            make_hash_value(user, timestamp),
            self.secret
        ).hexdigest()[::2]
        return f'{ts_b36}-{hash_str}'
